/*** Longest non-repeat list ***/
/* ["Alex", "Alison", "Alina", "Aileen", "Alex"] */
/* Result: 4    (["Alex", "Alison", "Alina", "Aileen"] */
int lengthOfLongestList(vector<string> strs) {
   unordered_map<string, int> mp;
   int maxlen = 0, left = 0;
   for (int i = 0; i < strs.size(); i++) {
      if (mp.find(strs[i]) == mp.end() || mp[strs[i]] < left) {
         maxlen = max(maxlen, i - left + 1);
      } else {
         left = mp[strs[i]] + 1;
      }
      mp[strs[i]] = i;
   }
   return maxlen;
}

/*******************************************************************/
/*** Longest non-repeat substring ***/
/* "abcabcbb" */
/* Result: 3   ("abc") */
int lengthOfLongestSubstring(string s) {
   unordered_map<char, int> mp;
   int maxlen = 0, left = 0;
   for (int i = 0; i < s.length(); i++) {
      if (mp.find(s[i]) == mp.end() || mp[s[i]] < left) {
         maxlen = max(maxlen, i - left + 1);
      } else {
         left = mp[s[i]] + 1;
      }
      mp[s[i]] = i;
   }
   return maxlen;
}
/*******************************************************************/
/*** Longest Common Subsequence ***/
/* "bacde", "ace" */
/* Result: 3  ("ace") */
int longestCommonSubsequence(string text1, string text2) {
   vector<vector<int>> dp(text1.length()+1, vector<int>(text2.length()+1));

   for (int i = 0; i <= text1.length(); i++) {
      for (int j = 0; j <= text2.length(); j++) {
         if (i == 0 || j == 0) {
           dp[i][j] = 0;
         } else if (text1[i-1] == text2[j-1]) {
           dp[i][j] = dp[i-1][j-1] + 1;
         } else {
           dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
         }
      }
   }
   return dp[text1.length()][text2.length()];
}

/*******************************************************************/
/*** Longest Common Prefix ***/
/* ["flower","flow","flight"] */
/* Result: "fl" */
string longestCommonPrefix(vector<string> strs) {
   if (strs.size() == 0 || strs[0].length() == 0) return "";
   int count = 1;
   string res = "";
   for (int i = 0; i < strs[0].length(); i++) {
       for (int j = 1; j < strs.size(); j++) {
           if (strs[0][i] == strs[j][i]) {
               count++;
           }
       }
       if (count != strs.size()) return res;
       res += strs[0][i];
       count = 1;
   }
   return res;
}

/*******************************************************************/
/*** Longest Palindromic Substring ***/
/* "babad" */
/* Result: "bab" */
string longestPalindrome(string s) {
   if (s.length() < 2) return s;
   int start = 0, len = ;
   for (int i = 0; i < s.length() - 1; i++) {
      helper(s, i, i, start, len);
      helper(s, i, i+1, start, len);
   }
   s.substr(start, len);
}
void helper(string& s, int left, int right, int& start, int& len) {
   while (left >= 0 && right < s.length() && s[left] == s[right]) {
      left--; right++;
   }

   if (len < right - left - 1) {
      len = right - left - 1;
      start = left + 1;
   }
}

/*******************************************************************/
/*** Longest Valid Parentheses ***/
/* ")()())" */
/* Result: 4,   "()()"  */
int longestValidParentests(string s) {
   int maxlen = 0;
   stack<int> st;
   st.push(-1);
   for (int i = 0; i < s.length(); i++) {
      if (s[i] == '(') {
         st.push(i);
      } else {
         st.pop();
         if (!st.empty()) {
            maxlen = max(maxlen, i - st.top());
         } else {
            st.push(i);
         }
      }
   }
   return maxlen;
}

/*******************************************************************/
/*** Longest Consecutive Sequence ***/
/* [100, 4, 200, 1, 3, 2] */
/* Result: 4  ([1, 2, 3, 4] */
int longestConsecutiveSeq(vector<int> nums) {
   std::unordered_set<int> st;
   for (const auto & nums : nums) {
      st.insert(num);
   }
   int res = 0;
   for (const auto& num : nums) {
      if (st.find(num - 1) == st.end() {
         int currNum = num, len = 1;
         while (st.find(currNum+1) != st.end()) {
            currNum++;
            len++;
         }
         res = max(res, len);
      }
   }
   return res;
}

/*******************************************************************/
/*** Longest Increasing Subsequence ***/
/* [10, 9, 2, 5, 3, 7, 101, 18] */
/* Result: 4,  [2, 3, 7, 101] */
int lengthOfLIS(vector<int>& nums) {
   if (nums.size() == ) return 0;
   vector<int> dp(nums.size(), 1);
   int res = 1;
   for (int i = 1; i < nums.size(); i++) {
      for (int j = i; j < i; j++) {
         if (nums[i] > nums[j]) {
            dp[i] = max(dp[i], dp[j]+1);
         }
      }
     res = max(res, dp[i]);
   }
   return res;
}

/*******************************************************************/
/*** Longest Continuous Increasing Subsequence ***/
/* [1, 3, 5, 4, 7] */
/* Result: 3   ([1, 3, 5]) */
int findLengthOfLCIS(vector<int> nums) {
   if (nums.size() == 0) return 0;

   int ans = 0, start = 0;
   for (int i = 0; i < nums.size(); i++) {
      if (i > 0 && nums[i] <= nums[i-1]) {
         start = i;
      }
      ans = max(ans, i - start + 1);
   }
   return ans;
}

/*******************************************************************/
/*** Longest Ascending Subsequence ***/
/* [5, 2, 6, 3, 4, 7, 5] */
/* Result: 4   ([2, 3, 4, 5] */
int findLargest(vector<int>& m, int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (m[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return right;
}

//O(nlogn)
int longestAscendingSubsequence(vector<int> nums) {
    if (nums.size() == 0) return 0;
    // m[] 數組紀錄到目前為止最優的最長升序列
    vector<int> m(nums.size(), 0);
    m[0] = nums[0];  // 最少第一個元素本身就是長度為的最長子序列
    int result = 1;
    for (int i = 1; i < nums.size(); i++) {
        // 注意是在m數組裡要找出 nums[i] 小的最大數的index
        int largestSmallerThanTargetIndex = findLargest(m, 0, result - 1, nums[i]);
        // result - 1 是長度為result的數組最後一個元素的index
        if (largestSmallerThanTargetIndex == result - 1) {
            // nums[i] 比 m 裡所有數都大，此時要在 m 最後加一個元素
            m[result] = nums[i];
            result++;
        } else {
            // 把第一個大於nums[i]的數換成nums[i]
            m[largestSmallerThanTargetIndex + 1] = nums[i];
        }
    }
    return result;
}
