/*** Longest Common Subsequence ***/
/* "bacde", "ace" */
/* Result: 3  ("ace") */
int longestCommonSubsequence(string text1, string text2) {
   vector<vector<int>> dp(text1.length()+1, vector<int>(text2.length()+1));

   for (int i = 0; i <= text1.length(); i++) {
      for (int j = 0; j <= text2.length(); j++) {
         if (i == 0 || j == 0) {
           dp[i][j] = 0;
         } else if (text1[i-1] == text2[j-1]) {
           dp[i][j] = dp[i-1][j-1] + 1;
         } else {
           dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
         }
      }
   }
   return dp[text1.length()][text2.length()];
}

/*** Longest Valid Parentheses ***/
/* ")()())" */
/* Result: 4,   "()()"  */
int longestValidParentests(string s) {
   int maxlen = 0;
   stack<int> st;
   st.push(-1);
   for (int i = 0; i < s.length(); i++) {
      if (s[i] == '(') {
         st.push(i);
      } else {
         st.pop();
         if (!st.empty()) {
            maxlen = max(maxlen, i - st.top());
         } else {
            st.push(i);
         }
      }
   }
   return maxlen;
}

/*** Longest Consecutive Sequence ***/
/* [100, 4, 200, 1, 3, 2] */
/* Result: 4  ([1, 2, 3, 4] */
int longestConsecutiveSeq(vector<int> nums) {
   std::unordered_set<int> st;
   for (const auto & nums : nums) {
      st.insert(num);
   }
   int res = 0;
   for (const auto& num : nums) {
      if (st.find(num - 1) == st.end() {
         int currNum = num, len = 1;
         while (st.find(currNum+1) != st.end()) {
            currNum++;
            len++;
         }
         res = max(res, len);
      }
   }
   return res;
}
