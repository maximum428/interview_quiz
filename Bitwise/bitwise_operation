// O(1) < O(log(n)) < O(n) < O(nlog(n)) < O(n^2) < O(n^3) < O(b^n), b > 1 < O(n!)

// Set bit
num |= 1UL << pos;

// Clear bit
num &= ~(1UL << pos);
num &= !(1 << pos);  // For Rust

// Toggle bit
num ^= 1UL << pos;

// Check bit
bit = (num >> pos) & 1UL;

// Change nth bit to x:
num ^= (-x ^ num) & (1 << n);

// Swap bits
int bit1 = (num >> pos1) & 1UL;
int bit2 = (num >> pos2) & 1UL;
int x = (bit1 ^ bit2);
num ^= ((x << pos1) | (x << pos2))

// Extract last bit
bit = num & -num;
let bit = num & num.wrappint_neg();  // For Rust
or
bit = num & ~(num - 1);
let bit = num & !(num - 1);  // For Rust

//Note:   -num is equal to ~(num - 1)

// Remove last bit
num & (num - 1)

// reverse bits
int res = 0;
for (int i = 0; i < 32; i++, n >>= 1) {
    res <<= 1;
    res |= n & 1;
}

// chop bits
int32_t res;
int32_t mask = -1;   //. 1111 1111
mask = ~(mask << len);    // 0000. 0011.  ex len = 2
num >>= pos;
res = num & mask;
// or
res = (((1 << len) - 1) & (n >> (pos - 1)));


#define MAX(x, y) x ^ ((x^y) & -(x < y))
#define MIN(x, y) y ^ ((x^y) & -(x < y))

// Find posiiton of rightmost set(1) bit:
int pos = log2(n & -n);
let pos = (num & num.wrapping_neg()).trailing_zeros() as usize;  // For Rust

5:   0000 0101
~5:  1111 1010
5-1: 0000 0100
-5:  1111 1011

4:   0000 0100
~4:  1111 1011
4-1: 0000 0011
-4:  1111 1100


auto m = min_element(mp.begin(), mp.end(), [](decltype(mp)::value& l, decltype(mp)::value& r) -> bool { return l.second < r.second; });

// Convert lower case to upper case
str[i] -= 32;
or
str[i] += ('Z' - 'z');

// Cover upper case to lower case
str[i] += 32;
or
str[i] -= ('Z' - 'z');

// Cover char to integer
int n = str[i] - '0';

=======================================================================
#include <iostream>
#include <vector>

using namespace std;

int UpperBound(vector<int> nums, int key) {
    int left = 0, right = nums.size() - 1;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] <= key) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
}

int LowerBound(vector<int> nums, int key) {
    int left = 0, right = nums.size() - 1;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] < key) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left - 1;
}

int main(int argc, char** argv) {
    vector<int> nums = {1, 2, 3, 4, 5, 6};
    
    cout << "Lower bound: " << nums[LowerBound(nums, 4)] << endl;
    
    cout << "Upper bound: " << nums[UpperBound(nums, 4)] << endl;
    return 0;
}


