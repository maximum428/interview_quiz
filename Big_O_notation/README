
// O(N)  [Linear] where N is the size of the array
for (const auto& n : nums) {
   if (n == x) {
      return true;
   }
}
/******************************************************/

// O(N^2)
void printPair(array) {
   for (auto x in array) {
      for (auto y in array) {
         cout << x << y << endl;
      }
   }
}  /* will print (5, 2) and (2, 5) - both orders */
/******************************************************/

// Rule#1: Different steps get added.   O(a+b)
void something() {
  doStep1(); // O(a)
  doStep2(); // O(b)
}
/******************************************************/

// Rule#2: Drop constants. O(2N) => O(N).  Drop the constant (2)
void minMax1(array) {
   int min = 0, max = 0;
  for (auto e : array) {   // O(n)  --
     min = MIN(e, min);               |
  }                                    O(N)
  for (auto e : array) {   // O(n)  __|
     max = MAX(e, array);
  }
}
void minMax2(array) {
   int min = 0, max = 0;
  for (auto e : array) {      // O(N)
     min = MIN(e, array);
     max = MAX(e, array);
  }
}
/******************************************************/

// Rule#3: Different inputs => different variables.  O(a * b),  a = length of ArrayA and b = length of ArrayB
int intersectionSize(arrayA, arrayB) {
   int count = 0;
  for (auto a : arrayA) {
     for ((auto b : arrayB) {
        if (a == b) {
           count++;
        }
     }
  }
  return count;
}
/******************************************************/
// Rule#4: Drop non-dominate terms. O(N+N^2) => O(N^2) 
// (O(N^2) < or = O(N+N^2) < or = O(N^2+N^2).  Note: If LEFT and RIGHT are equivalent (See Rule 2), the CENTER is too.)
void func(array) {
   int max = 0;
   for (auto a : array) {
      max = MAX(a, max);
   }
   print max;
   for (auto b : array) {
      for (auto b : array) {
         print(a, b);
      }
   }
}
